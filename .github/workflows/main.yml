name: Deploy EC-SITE 

on:
  push:
    branches: ["master"]

env:
  AWS_REGION: us-east-1
  ECS_SERVICE: ec-site-service
  ECS_CLUSTER: ec-site
  ECS_TASK_DEFINITION: .aws/task-definition.json

permissions:
  contents: read


jobs:
  # frontendコンテナ
  # Frontend Container Build/Test
  frontend-test-build-image:
    name: Frontend Container - Test and Build
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    defaults:
      run:
        working-directory: frontend
    
    steps:
      ## Get Source
      - uses: actions/checkout@v3

      ## Build/Test
      ## Docker Image Build
      - name: Build an Image and Run Tests
        run: |
          docker image build --target production -t temp_frontend_image_name:latest .

      ## Login AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      ## Push image to ECR
      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_FRONTEND_SERVER_REPOSITORY }}
        run: |
          docker image tag temp_frontend_image_name:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # backendコンテナ
  # Backend Container Build/Test
  backend-test-build-image:
    name: Backend Container - Test and Build
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    defaults:
      run:
        working-directory: backend
  
    steps:
      ## Get Source
      - uses: actions/checkout@v3

      ## Build/Test
      ## Docker Image Build
      - name: Build an Image and Run Tests
        run: |
          docker image build --target production -t temp_backend_image_name:latest .

      ## Login AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      ## Push image to ECR
      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_BACKEND_SERVER_REPOSITORY }}
        run: |
          docker image tag temp_backend_image_name:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # Deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04 
    needs: [frontend-test-build-image, backend-test-build-image]

    steps:
      ## Get Source
      - name: Checkout
        uses: actions/checkout@v3

      ## Login AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      ## Edit Task Definition
      - name: Fill in the new image ID in the Amazon ECS task definition for frontend
        id: render-frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: frontend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_FRONTEND_SERVER_REPOSITORY }}

      - name: Fill in the new image ID in the Amazon ECS task definition for backend
        id: render-backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend-task-def.outputs.task-definition }}
          container-name: backend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_BACKEND_SERVER_REPOSITORY }}

      ## Deploy
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-backend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true







